{"version":3,"sources":["audio/piano.mp3","audio/cymbals.mp3","audio/tambourine.wav","audio/flute.wav","audio/trombone.mp3","audio/saxophone.mp3","audio/violin.mp3","audio/guitar.mp3","audio/bass.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","varName","Drums","props","state","source","binding","piano","cymbal","tambourine","flute","trombone","saxophone","violin","guitar","bass","audiotext","playSound","bind","handleKeyPress","focusElement","button","React","createRef","event","target","getAttribute","this","setState","value","keyCode","current","focus","x","document","getElementById","audioIdFinder","play","currentTime","map","i","onKeyDown","tabIndex","onClick","className","id","ref","onBlur","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8688ba14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piano.b06ca26f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/cymbals.736be47e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tambourine.1a5944a3.wav\";","module.exports = __webpack_public_path__ + \"static/media/flute.043bebf9.wav\";","module.exports = __webpack_public_path__ + \"static/media/trombone.f90da1df.mp3\";","module.exports = __webpack_public_path__ + \"static/media/saxophone.bb455d41.mp3\";","module.exports = __webpack_public_path__ + \"static/media/violin.95d098b2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/guitar.b06be46f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bass.f6500e94.mp3\";","import React from \"react\";\r\nimport \"./App.css\";\r\n//Audio files imported\r\nimport piano from \"./audio/piano.mp3\";\r\nimport cymbal from \"./audio/cymbals.mp3\";\r\nimport tambourine from \"./audio/tambourine.wav\";\r\nimport flute from \"./audio/flute.wav\";\r\nimport trombone from \"./audio/trombone.mp3\";\r\nimport saxophone from \"./audio/saxophone.mp3\";\r\nimport violin from \"./audio/violin.mp3\";\r\nimport guitar from \"./audio/guitar.mp3\";\r\nimport bass from \"./audio/bass.mp3\";\r\n\r\nlet varName = '';\r\n\r\nclass Drums extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*State holds a 2 dimensional array with all the key bindings and the instrument associated to that key.\r\n    The source state will hold a variable associated with the string path to the audio file imported.\r\n    Finally, audiotext holds a string noting which instrument has been played.*/\r\n    this.state = {\r\n      source: null,\r\n      binding:[[\"Q\",piano,\"Piano\"],[\"W\",cymbal,\"Cymbal\"],[\"E\",tambourine,\"Tambourine\"],[\"A\",flute,\"Flute\"],[\"S\",trombone,\"Trombone\"],[\"D\",saxophone,\"Saxophone\"],[\"Z\",violin,\"Violin\"],[\"X\",guitar,\"Guitar\"],[\"C\",bass,\"Bass\"]],\r\n      audiotext: \"\",\r\n    };\r\n    this.playSound = this.playSound.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.focusElement = this.focusElement.bind(this);\r\n    this.button = React.createRef();\r\n  }\r\n\r\n  playSound(event) {\r\n    /*When playSound is activated, audiotext is set to the id of the button that triggered the event handler.\r\n    Source is set to the value of the button clicked.*/\r\n    varName = event.target.getAttribute(\"id\");\r\n    this.setState({\r\n      source: event.target.value,\r\n      audiotext: varName\r\n    });\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    /*handleKeyPress event handler checks which key was pressed to trigger the event based on the keyCode associated to that key\r\n    and sets the source and audiotext appropriate to the instrument we binded to that key.\r\n    For example, if I press press the \"a\" key, the keyCode associated to that key is 65 and so source will be set to the flute variable and audiotext to \"Flute\".*/\r\n    switch (event.keyCode) {\r\n      case 81:\r\n        varName = \"Piano\";\r\n        this.setState({\r\n          source: piano,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 87:\r\n        varName = \"Cymbal\";\r\n        this.setState({\r\n          source: cymbal,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 69:\r\n        varName = \"Tambourine\";\r\n        this.setState({\r\n          source: tambourine,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 65:\r\n        varName = \"Flute\";\r\n        this.setState({\r\n          source: flute,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 83:\r\n        varName = \"Trombone\";\r\n        this.setState({\r\n          source: trombone,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 68:\r\n        varName = \"Saxophone\";\r\n        this.setState({\r\n          source: saxophone,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 90:\r\n        varName = \"Violin\";\r\n        this.setState({\r\n          source: violin,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 88:\r\n        varName = \"Guitar\";\r\n        this.setState({\r\n          source: guitar,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n      case 67:\r\n        varName = \"Bass\";\r\n        this.setState({\r\n          source: bass,\r\n          audiotext: varName\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  focusElement() {\r\n    /*focusElement makes sure that the buttons are always focused so that whenever we press an instrument key,\r\n    the handleKeyPress event is activated*/\r\n    this.button.current.focus();\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*We make sure that button is focused the first time the DOM is rendered so that whenever we press an instrument key,\r\n    the handleKeyPress event is activated*/\r\n    this.button.current.focus();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    /*When we click on a button or press a key, we update the component's state.\r\n    Once updated, we play the audio element.*/\r\n    /*The audioIdFinder() function returns a string corresponding to the audio element's id\r\n    based on the instrument string found in varName.*/\r\n    function audioIdFinder() {\r\n      switch(varName) {\r\n        case \"Piano\" :\r\n          return \"Q\";\r\n        case \"Cymbal\" :\r\n          return \"W\";\r\n        case \"Tambourine\" :\r\n          return \"E\";\r\n        case \"Flute\" :\r\n          return \"A\";\r\n        case \"Trombone\" :\r\n          return \"S\";\r\n        case \"Saxophone\" :\r\n          return \"D\";\r\n        case \"Violin\" :\r\n          return \"Z\";\r\n        case \"Guitar\" :\r\n          return \"X\";\r\n        case \"Bass\" :\r\n          return \"C\";\r\n      }\r\n    }\r\n    /*We then target the audio element thanks to the string returned in audioIdFinder() and finally play the sound.*/\r\n    let x = document.getElementById(audioIdFinder());\r\n    x.play();\r\n    x.currentTime = 0;\r\n  }\r\n\r\n  render() {\r\n    /*I'm rendering 9 buttons and associating an id, value and key string to each of them by mapping the array in the state binding.\r\n    Audio's id is set to the key string for that instrument's button (Example:\"Q\",\"W\",...) and it's src attribute is equal to the state source.*/\r\n    const button = this.state.binding.map(i => <button onKeyDown={this.handleKeyPress} tabIndex=\"0\" onClick={this.playSound} className=\"btn drum-pad\" id={i[2]} value={i[1]} ref={this.button} onBlur={this.focusElement}>\r\n                                               {i[0]}\r\n                                               <audio src={this.state.source} className=\"clip\" id={i[0]} />\r\n                                               </button>)\r\n    return (\r\n      <div id=\"display\">\r\n        <div id=\"container\">\r\n          {button}\r\n        </div>\r\n        <p id=\"audiotext\">{this.state.audiotext}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drums;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('drum-machine')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}